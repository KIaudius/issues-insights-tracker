version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: issues-tracker-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-issues_tracker}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: issues-tracker-backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-issues_tracker}
      - SECRET_KEY=${SECRET_KEY:-supersecretkey}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}
      - UPLOAD_DIR=/app/uploads
    volumes:
      - ./backend:/app
      - uploads_data:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  # Background Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: issues-tracker-worker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-issues_tracker}
      - SECRET_KEY=${SECRET_KEY:-supersecretkey}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    volumes:
      - ./backend:/app
    depends_on:
      - backend
      - db
    restart: unless-stopped

  # SvelteKit Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: issues-tracker-frontend
    environment:
      - PUBLIC_API_URL=${PUBLIC_API_URL:-http://localhost:8000}
      - PUBLIC_WS_URL=${PUBLIC_WS_URL:-ws://localhost:8000/ws}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    command: npm run dev

volumes:
  postgres_data:
  uploads_data:
