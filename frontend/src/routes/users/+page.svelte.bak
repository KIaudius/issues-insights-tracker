<script>
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';
  import { isAdmin, getAuthToken } from '$lib/stores/auth';
  
  // State
  let users = [];
  let loading = true;
  let error = null;
  let showCreateModal = false;
  let showEditModal = false;
  let showDeleteModal = false;
  let currentUser = null;
  
  // Form state for create/edit
  let formData = {
    username: '',
    email: '',
    password: '',
    role: 'REPORTER'
  };
  
  // Form errors
  let formErrors = {
    username: '',
    email: '',
    password: ''
  };
  
  // Pagination
  let currentPage = 1;
  let pageSize = 10;
  let totalPages = 0;
  let totalUsers = 0;
  
  // Search
  let searchQuery = '';
  
  onMount(async () => {
    // Check if user is admin
    const unsubscribe = isAdmin.subscribe(value => {
      if (!value) {
        // Redirect non-admin users
        goto('/');
      }
    });
    
    await loadUsers();
    
    return () => {
      unsubscribe();
    };
  });
  
  async function loadUsers() {
    loading = true;
    error = null;
    
    try {
      // In a real implementation, this would fetch from the API
      // const token = await getAuthToken();
      // const response = await fetch(
      //   `/api/v1/users/?page=${currentPage}&limit=${pageSize}&search=${searchQuery}`,
      //   {
      //     headers: {
      //       'Authorization': `Bearer ${token}`
      //     }
      //   }
      // );
      // 
      // if (!response.ok) {
      //   throw new Error('Failed to fetch users');
      // }
      // 
      // const data = await response.json();
      // users = data.data;
      // totalUsers = data.total;
      // totalPages = Math.ceil(totalUsers / pageSize);
      
      // For now, we'll use mock data
      setTimeout(() => {
        const mockUsers = [
          {
            id: 1,
            username: 'admin.user',
            email: 'admin@example.com',
            role: 'ADMIN',
            is_active: true,
            created_at: '2025-06-01T10:00:00Z',
            last_login: '2025-07-01T09:30:00Z'
          },
          {
            id: 2,
            username: 'john.doe',
            email: 'john.doe@example.com',
            role: 'MAINTAINER',
            is_active: true,
            created_at: '2025-06-05T14:20:00Z',
            last_login: '2025-06-30T16:45:00Z'
          },
          {
            id: 3,
            username: 'jane.smith',
            email: 'jane.smith@example.com',
            role: 'REPORTER',
            is_active: true,
            created_at: '2025-06-10T11:30:00Z',
            last_login: '2025-07-01T08:15:00Z'
          },
          {
            id: 4,
            username: 'alex.johnson',
            email: 'alex.johnson@example.com',
            role: 'REPORTER',
            is_active: true,
            created_at: '2025-06-15T09:45:00Z',
            last_login: '2025-06-29T14:20:00Z'
          },
          {
            id: 5,
            username: 'sarah.williams',
            email: 'sarah.williams@example.com',
            role: 'MAINTAINER',
            is_active: false,
            created_at: '2025-06-20T13:10:00Z',
            last_login: '2025-06-25T10:30:00Z'
          }
        ];
        
        // Apply search filter if provided
        if (searchQuery) {
          const query = searchQuery.toLowerCase();
          users = mockUsers.filter(user => 
            user.username.toLowerCase().includes(query) || 
            user.email.toLowerCase().includes(query)
          );
        } else {
          users = mockUsers;
        }
        
        totalUsers = users.length;
        totalPages = Math.ceil(totalUsers / pageSize);
        loading = false;
      }, 500);
    } catch (e) {
      console.error('Error fetching users:', e);
      error = 'Failed to load users. Please try again later.';
      loading = false;
    }
  }
  
  // Handle page change
  function changePage(page) {
    currentPage = page;
    loadUsers();
  }
  
  // Handle search
  function handleSearch() {
    currentPage = 1;
    loadUsers();
  }
  
  // Reset search
  function resetSearch() {
    searchQuery = '';
    currentPage = 1;
    loadUsers();
  }
  
  // Open create user modal
  function openCreateModal() {
    // Reset form data
    formData = {
      username: '',
      email: '',
      password: '',
      role: 'REPORTER'
    };
    formErrors = { username: '', email: '', password: '' };
    showCreateModal = true;
  }
  
  // Open edit user modal
  function openEditModal(user) {
    currentUser = user;
    formData = {
      username: user.username,
      email: user.email,
      password: '', // Don't populate password for security
      role: user.role
    };
    formErrors = { username: '', email: '', password: '' };
    showEditModal = true;
  }
  
  // Open delete user modal
  function openDeleteModal(user) {
    currentUser = user;
    showDeleteModal = true;
  }
  
  // Close all modals
  function closeModals() {
    showCreateModal = false;
    showEditModal = false;
    showDeleteModal = false;
    currentUser = null;
  }
  
  // Validate form
  function validateForm(isCreate) {
    let isValid = true;
    formErrors = { username: '', email: '', password: '' };
    
    // Username validation
    if (!formData.username.trim()) {
      formErrors.username = 'Username is required';
      isValid = false;
    } else if (formData.username.length < 3) {
      formErrors.username = 'Username must be at least 3 characters';
      isValid = false;
    }
    
    // Email validation
    if (!formData.email.trim()) {
      formErrors.email = 'Email is required';
      isValid = false;
    } else if (!isValidEmail(formData.email)) {
      formErrors.email = 'Please enter a valid email address';
      isValid = false;
    }
    
    // Password validation (required for create, optional for edit)
    if (isCreate && !formData.password) {
      formErrors.password = 'Password is required';
      isValid = false;
    } else if (formData.password && formData.password.length < 8) {
      formErrors.password = 'Password must be at least 8 characters';
      isValid = false;
    }
    
    return isValid;
  }
  
  // Email validation helper
  function isValidEmail(email) {
    const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return re.test(String(email).toLowerCase());
  }
  
  // Create user
  async function createUser() {
    if (!validateForm(true)) return;
    
    try {
      // In a real implementation, this would post to the API
      // const token = await getAuthToken();
      // const response = await fetch('/api/v1/users/', {
      //   method: 'POST',
      //   headers: {
      //     'Content-Type': 'application/json',
      //     'Authorization': `Bearer ${token}`
      //   },
      //   body: JSON.stringify(formData)
      // });
      // 
      // if (!response.ok) {
      //   const errorData = await response.json();
      //   throw new Error(errorData.detail || 'Failed to create user');
      // }
      
      // For now, we'll simulate creating a user
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Add new user to the list with mock data
      const newUser = {
        id: users.length + 1,
        username: formData.username,
        email: formData.email,
        role: formData.role,
        is_active: true,
        created_at: new Date().toISOString(),
        last_login: null
      };
      
      users = [newUser, ...users];
      closeModals();
    } catch (e) {
      console.error('Error creating user:', e);
      alert(`Failed to create user: ${e.message}`);
    }
  }
  
  // Update user
  async function updateUser() {
    if (!validateForm(false)) return;
    
    try {
      // In a real implementation, this would put to the API
      // const token = await getAuthToken();
      // const response = await fetch(`/api/v1/users/${currentUser.id}`, {
      //   method: 'PUT',
      //   headers: {
      //     'Content-Type': 'application/json',
      //     'Authorization': `Bearer ${token}`
      //   },
      //   body: JSON.stringify({
      //     username: formData.username,
      //     email: formData.email,
      //     role: formData.role,
      //     ...(formData.password ? { password: formData.password } : {})
      //   })
      // });
      // 
      // if (!response.ok) {
      //   const errorData = await response.json();
      //   throw new Error(errorData.detail || 'Failed to update user');
      // }
      
      // For now, we'll simulate updating a user
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Update user in the list
      users = users.map(user => {
        if (user.id === currentUser.id) {
          return {
            ...user,
            username: formData.username,
            email: formData.email,
            role: formData.role
          };
        }
        return user;
      });
      
      closeModals();
    } catch (e) {
      console.error('Error updating user:', e);
      alert(`Failed to update user: ${e.message}`);
    }
  }
  
  // Delete user
  async function deleteUser() {
    try {
      // In a real implementation, this would delete from the API
      // const token = await getAuthToken();
      // const response = await fetch(`/api/v1/users/${currentUser.id}`, {
      //   method: 'DELETE',
      //   headers: {
      //     'Authorization': `Bearer ${token}`
      //   }
      // });
      // 
      // if (!response.ok) {
      //   const errorData = await response.json();
      //   throw new Error(errorData.detail || 'Failed to delete user');
      // }
      
      // For now, we'll simulate deleting a user
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Remove user from the list
      users = users.filter(user => user.id !== currentUser.id);
      
      closeModals();
    } catch (e) {
      console.error('Error deleting user:', e);
      alert(`Failed to delete user: ${e.message}`);
    }
  }
  
  // Format date
  function formatDate(dateString) {
    if (!dateString) return 'Never';
    
    const date = new Date(dateString);
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  }
  
  // Get role badge class
  function getRoleBadgeClass(role) {
    switch (role) {
      case 'ADMIN': return 'badge-error';
      case 'MAINTAINER': return 'badge-warning';
      case 'REPORTER': return 'badge-info';
      default: return 'badge-secondary';
    }
  }
</script>

<svelte:head>
  <title>User Management | Issues & Insights</title>
</svelte:head>

<div class="users-page">
  <div class="page-header">
    <h1 class="page-title">User Management</h1>
    <button class="btn btn-primary" on:click={openCreateModal}>
      <i class="fas fa-user-plus"></i>
      <span>New User</span>
    </button>
  </div>
  
  <div class="search-bar">
    <div class="search-box">
      <i class="fas fa-search search-icon"></i>
      <input 
        type="text" 
        bind:value={searchQuery} 
        placeholder="Search users..."
        on:keyup={event => event.key === 'Enter' && handleSearch()}
      />
      <button class="search-btn" on:click={handleSearch}>
        Search
      </button>
    </div>
    
    {#if searchQuery}
      <button class="reset-btn" on:click={resetSearch}>
        <i class="fas fa-times"></i>
        <span>Clear</span>
      </button>
    {/if}
  </div>
  
  {#if loading}
    <div class="loading-state">
      <div class="spinner"></div>
      <p>Loading users...</p>
    </div>
  {:else if error}
    <div class="error-state">
      <i class="fas fa-exclamation-triangle"></i>
      <p>{error}</p>
      <button class="btn btn-primary" on:click={loadUsers}>Retry</button>
    </div>
  {:else if users.length === 0}
    <div class="empty-state">
      <i class="fas fa-users"></i>
      <p>No users found{searchQuery ? ' matching your search' : ''}.</p>
      {#if searchQuery}
        <button class="btn btn-secondary" on:click={resetSearch}>Clear Search</button>
      {:else}
        <button class="btn btn-primary" on:click={openCreateModal}>Create First User</button>
      {/if}
    </div>
  {:else}
    <div class="users-table-container">
      <table class="users-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Username</th>
            <th>Email</th>
            <th>Role</th>
            <th>Status</th>
            <th>Created</th>
            <th>Last Login</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {#each users as user}
            <tr>
              <td>#{user.id}</td>
              <td>{user.username}</td>
              <td>{user.email}</td>
              <td>
                <span class="badge {getRoleBadgeClass(user.role)}">{user.role}</span>
              </td>
              <td>
                <span class="status-indicator {user.is_active ? 'active' : 'inactive'}">
                  {user.is_active ? 'Active' : 'Inactive'}
                </span>
              </td>
              <td>{formatDate(user.created_at)}</td>
              <td>{formatDate(user.last_login)}</td>
              <td>
                <div class="actions">
                  <button class="action-btn edit" on:click={() => openEditModal(user)} title="Edit User">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="action-btn delete" on:click={() => openDeleteModal(user)} title="Delete User">
                    <i class="fas fa-trash-alt"></i>
                  </button>
                </div>
              </td>
            </tr>
          {/each}
        </tbody>
      </table>
    </div>
    
    {#if totalPages > 1}
      <div class="pagination">
        <button 
          class="pagination-btn" 
          disabled={currentPage === 1}
          on:click={() => changePage(currentPage - 1)}
        >
          <i class="fas fa-chevron-left"></i>
        </button>
        
        {#each Array(totalPages) as _, i}
          <button 
            class="pagination-btn {currentPage === i + 1 ? 'active' : ''}"
            on:click={() => changePage(i + 1)}
          >
            {i + 1}
          </button>
        {/each}
        
        <button 
          class="pagination-btn" 
          disabled={currentPage === totalPages}
          on:click={() => changePage(currentPage + 1)}
        >
          <i class="fas fa-chevron-right"></i>
        </button>
      </div>
    {/if}
  {/if}
  
  <!-- Create User Modal -->
  {#if showCreateModal}
    <div class="modal-overlay" role="dialog" aria-modal="true" on:click={closeModals} on:keydown={event => event.key === 'Escape' && closeModals()}>
      <div class="modal" role="document" on:click|stopPropagation
        <div class="modal-header">
          <h3>Create New User</h3>
          <button class="close-btn" on:click={closeModals}>
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <label for="username">Username <span class="required">*</span></label>
            <input 
              type="text" 
              id="username" 
              bind:value={formData.username} 
              class={formErrors.username ? 'error' : ''}
              placeholder="Enter username"
            />
            {#if formErrors.username}
              <div class="error-message">{formErrors.username}</div>
            {/if}
          </div>
          
          <div class="form-group">
            <label for="email">Email <span class="required">*</span></label>
            <input 
              type="email" 
              id="email" 
              bind:value={formData.email} 
              class={formErrors.email ? 'error' : ''}
              placeholder="Enter email"
            />
            {#if formErrors.email}
              <div class="error-message">{formErrors.email}</div>
            {/if}
          </div>
          
          <div class="form-group">
            <label for="password">Password <span class="required">*</span></label>
            <input 
              type="password" 
              id="password" 
              bind:value={formData.password} 
              class={formErrors.password ? 'error' : ''}
              placeholder="Enter password"
            />
            {#if formErrors.password}
              <div class="error-message">{formErrors.password}</div>
            {/if}
          </div>
          
          <div class="form-group">
            <label for="role">Role <span class="required">*</span></label>
            <select id="role" bind:value={formData.role}>
              <option value="REPORTER">Reporter</option>
              <option value="MAINTAINER">Maintainer</option>
              <option value="ADMIN">Admin</option>
            </select>
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" on:click={closeModals}>Cancel</button>
          <button class="btn btn-primary" on:click={createUser}>Create User</button>
        </div>
      </div>
    </div>
  {/if}
  
  <!-- Edit User Modal -->
  {#if showEditModal && currentUser}
    <div class="modal-overlay" role="dialog" aria-modal="true" on:click={closeModals} on:keydown={event => event.key === 'Escape' && closeModals()}>
      <div class="modal" role="document" on:click|stopPropagation
        <div class="modal-header">
          <h3>Edit User: {currentUser.username}</h3>
          <button class="close-btn" on:click={closeModals}>
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <label for="edit-username">Username <span class="required">*</span></label>
            <input 
              type="text" 
              id="edit-username" 
              bind:value={formData.username} 
              class={formErrors.username ? 'error' : ''}
              placeholder="Enter username"
            />
            {#if formErrors.username}
              <div class="error-message">{formErrors.username}</div>
            {/if}
          </div>
          
          <div class="form-group">
            <label for="edit-email">Email <span class="required">*</span></label>
            <input 
              type="email" 
              id="edit-email" 
              bind:value={formData.email} 
              class={formErrors.email ? 'error' : ''}
              placeholder="Enter email"
            />
            {#if formErrors.email}
              <div class="error-message">{formErrors.email}</div>
            {/if}
          </div>
          
          <div class="form-group">
            <label for="edit-password">Password (leave blank to keep current)</label>
            <input 
              type="password" 
              id="edit-password" 
              bind:value={formData.password} 
              class={formErrors.password ? 'error' : ''}
              placeholder="Enter new password"
            />
            {#if formErrors.password}
              <div class="error-message">{formErrors.password}</div>
            {/if}
          </div>
          
          <div class="form-group">
            <label for="edit-role">Role <span class="required">*</span></label>
            <select id="edit-role" bind:value={formData.role}>
              <option value="REPORTER">Reporter</option>
              <option value="MAINTAINER">Maintainer</option>
              <option value="ADMIN">Admin</option>
            </select>
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" on:click={closeModals}>Cancel</button>
          <button class="btn btn-primary" on:click={updateUser}>Update User</button>
        </div>
      </div>
    </div>
  {/if}
  
  <!-- Delete User Modal -->
  {#if showDeleteModal && currentUser}
    <div class="modal-overlay" role="dialog" aria-modal="true" on:click={closeModals} on:keydown={event => event.key === 'Escape' && closeModals()}>
      <div class="modal" role="document" on:click|stopPropagation
        <div class="modal-header">
          <h3>Delete User</h3>
          <button class="close-btn" on:click={closeModals}>
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <p class="delete-confirmation">
            Are you sure you want to delete the user <strong>{currentUser.username}</strong>?
            This action cannot be undone.
          </p>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" on:click={closeModals}>Cancel</button>
          <button class="btn btn-danger" on:click={deleteUser}>Delete User</button>
        </div>
      </div>
    </div>
  {/if}
</div>

<style>
  .users-page {
    padding-bottom: 2rem;
  }
  
  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }
  
  .page-title {
    font-size: 1.875rem;
    font-weight: 700;
    margin: 0;
  }
  
  .search-bar {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
    align-items: center;
  }
  
  .search-box {
    position: relative;
    flex: 1;
    display: flex;
  }
  
  .search-icon {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-muted);
  }
  
  .search-box input {
    flex: 1;
    padding: 0.5rem 1rem 0.5rem 2.5rem;
    border: 1px solid var(--border-color);
    border-radius: 0.375rem 0 0 0.375rem;
    font-size: 0.875rem;
  }
  
  .search-btn {
    padding: 0.5rem 1rem;
    background-color: var(--accent-color);
    color: white;
    border: none;
    border-radius: 0 0.375rem 0.375rem 0;
    cursor: pointer;
  }
  
  .reset-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background-color: var(--background-secondary);
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    cursor: pointer;
  }
  
  .loading-state, .error-state, .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 4rem 0;
    gap: 1rem;
    color: var(--text-muted);
  }
  
  .spinner {
    width: 3rem;
    height: 3rem;
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-left-color: var(--accent-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  .error-state i, .empty-state i {
    font-size: 3rem;
    color: var(--text-muted);
  }
  
  .users-table-container {
    overflow-x: auto;
    margin-bottom: 1.5rem;
  }
  
  .users-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.875rem;
  }
  
  .users-table th {
    text-align: left;
    padding: 0.75rem 1rem;
    background-color: var(--background-secondary);
    font-weight: 600;
    border-bottom: 1px solid var(--border-color);
  }
  
  .users-table td {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid var(--border-color);
  }
  
  .badge {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
  }
  
  .badge-error {
    background-color: var(--error-bg);
    color: var(--error-color);
  }
  
  .badge-warning {
    background-color: var(--warning-bg);
    color: var(--warning-color);
  }
  
  .badge-info {
    background-color: var(--info-bg);
    color: var(--info-color);
  }
  
  .badge-secondary {
    background-color: var(--background-secondary);
    color: var(--text-muted);
  }
  
  .status-indicator {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
  }
  
  .status-indicator.active {
    background-color: var(--success-bg);
    color: var(--success-color);
  }
  
  .status-indicator.inactive {
    background-color: var(--error-bg);
    color: var(--error-color);
  }
  
  .actions {
    display: flex;
    gap: 0.5rem;
  }
  
  .action-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
    border-radius: 0.375rem;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .action-btn.edit {
    background-color: var(--warning-bg);
    color: var(--warning-color);
  }
  
  .action-btn.edit:hover {
    background-color: var(--warning-color);
    color: white;
  }
  
  .action-btn.delete {
    background-color: var(--error-bg);
    color: var(--error-color);
  }
  
  .action-btn.delete:hover {
    background-color: var(--error-color);
    color: white;
  }
  
  .pagination {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-top: 1.5rem;
  }
  
  .pagination-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    background-color: var(--background-color);
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .pagination-btn.active {
    background-color: var(--accent-color);
    color: white;
    border-color: var(--accent-color);
  }
  
  .pagination-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  .modal {
    background-color: var(--background-color);
    border-radius: 0.5rem;
    width: 100%;
    max-width: 500px;
    box-shadow: var(--card-shadow);
    overflow: hidden;
  }
  
  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid var(--border-color);
  }
  
  .modal-header h3 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
  }
  
  .close-btn {
    background: none;
    border: none;
    font-size: 1.25rem;
    cursor: pointer;
    color: var(--text-muted);
  }
  
  .modal-body {
    padding: 1.5rem;
  }
  
  .modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    padding: 1rem 1.5rem;
    border-top: 1px solid var(--border-color);
  }
  
  .form-group {
    margin-bottom: 1.5rem;
  }
  
  .form-group:last-child {
    margin-bottom: 0;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
  }
  
  .required {
    color: var(--error-color);
  }
  
  .form-group input,
  .form-group select {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    font-size: 0.875rem;
  }
  
  .form-group input.error,
  .form-group select.error {
    border-color: var(--error-color);
  }
  
  .error-message {
    color: var(--error-color);
    font-size: 0.75rem;
    margin-top: 0.5rem;
  }
  
  .delete-confirmation {
    text-align: center;
    margin: 0;
    padding: 1rem 0;
  }
  
  .btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .btn-primary {
    background-color: var(--accent-color);
    color: white;
  }
  
  .btn-primary:hover {
    background-color: var(--accent-hover);
  }
  
  .btn-secondary {
    background-color: var(--background-secondary);
    color: var(--text-color);
  }
  
  .btn-secondary:hover {
    background-color: var(--border-color);
  }
  
  .btn-danger {
    background-color: var(--error-color);
    color: white;
  }
  
  .btn-danger:hover {
    background-color: var(--error-hover);
  }
</style>
